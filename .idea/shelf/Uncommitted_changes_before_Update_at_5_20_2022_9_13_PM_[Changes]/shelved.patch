Index: run_elmo_Liang.py
===================================================================
diff --git a/run_elmo_Liang.py b/run_elmo_Liang.py
deleted file mode 100644
--- a/run_elmo_Liang.py	(revision 52c81401dd4c30c066d1aceb96530a5e45a8c034)
+++ /dev/null	(revision 52c81401dd4c30c066d1aceb96530a5e45a8c034)
@@ -1,262 +0,0 @@
-import torch
-import torch.nn as nn
-from torch.utils.data import DataLoader
-
-from models.elmo_Liang import ELMO
-from utils.datasets import BERT_DATA, Alphabet
-from utils.metrics import binary_analysis, proportional_analysis, get_analysis
-
-import os, random, tqdm, logging, argparse
-import numpy as np
-import pickle
-
-
-def seed_everything(seed_value=5550):
-    os.environ['PYTHONHASHSEED'] = str(seed_value)
-    random.seed(seed_value)
-    np.random.seed(seed_value)
-    torch.manual_seed(seed_value)
-    torch.cuda.manual_seed_all(seed_value)
-
-    torch.backends.cudnn.deterministic = True
-    torch.backends.cudnn.benchmark = False
-
-
-def setup_logs(save_dir, run_name):
-    # initialize logger
-    logger = logging.getLogger("TSA_bert_char")
-    logger.setLevel(logging.INFO)
-
-    # create the logging file handler
-    log_file = os.path.join(save_dir, run_name + ".log")
-    fh = logging.FileHandler(log_file)
-
-    # create the logging console handler
-    ch = logging.StreamHandler()
-
-    # format
-    formatter = logging.Formatter("%(asctime)s - %(message)s")
-    fh.setFormatter(formatter)
-
-    # add handlers to logger object
-    logger.addHandler(fh)
-    logger.addHandler(ch)
-
-    return logger
-
-
-# it takes time to get elmo vectors using simple_elmo, especially for validation and test
-# here I get pickled version of vectors and validate and test using these vectors
-def get_elmo(model, train_loader, dev_loader, test_loader):
-    # train_elmo_vectors = []
-    dev_elmo_vectors = []
-    test_elmo_vectors = []
-    # for sentences, lengths, labels, char_list in train_loader:
-    #    train_elmo_vectors.append(model.get_elmo_vectors(sentences))
-
-    # with open('train_elmo_vectors.pkl', 'wb') as f:
-    #    pickle.dump(train_elmo_vectors, f)
-
-    for sentences, lengths, labels, char_list in dev_loader:
-        dev_elmo_vectors.append(model.get_elmo_vectors(sentences))
-
-    with open('dev_elmo_vectors.pkl', 'wb') as f:
-        pickle.dump(dev_elmo_vectors, f)
-
-    for sentences, lengths, labels, char_list in test_loader:
-        test_elmo_vectors.append(model.get_elmo_vectors(sentences))
-
-    with open('test_elmo_vectors.pkl', 'wb') as f:
-        pickle.dump(test_elmo_vectors, f)
-
-    return train_elmo_vectors, dev_elmo_vectors, test_elmo_vectors
-
-
-def test():
-    # Testing the model with test data
-    predicted_tags = []
-    gold_tags = []
-    raw_sentences = []
-
-    test_iter = tqdm.tqdm(test_loader)
-    idx = 0
-    for sentences, lengths, labels, char_list in test_iter:
-        labels = labels.to(device)
-
-        prediction = model(test_elmo_vectors[idx])
-        idx += 1
-
-        new_labels = []
-        new_preds = []
-        for i in range(len(sentences)):
-            new_labels.append(labels[i][:len(sentences[i])])
-            new_preds.append(prediction.argmax(-1)[i][:len(sentences[i])])
-
-        predicted_tags += new_preds
-        gold_tags += new_labels
-        raw_sentences += sentences
-
-    binary_f1, propor_f1 = compute_score(sents=raw_sentences, golds=gold_tags, preds=predicted_tags)
-    return binary_f1, propor_f1
-
-
-def evaluate():
-    predicted_tags, gold_tags, raw_sentences = [], [], []
-
-    model.eval()
-    dev_iter = tqdm.tqdm(dev_loader)
-
-    idx = 0
-
-    for sentences, lengths, labels, char_list in dev_iter:
-
-        labels = labels.to(device)
-
-        prediction = model(dev_elmo_vectors[idx])
-        idx += 1
-
-        new_labels = []
-        new_preds = []
-        for i in range(len(sentences)):
-            new_labels.append(labels[i][:len(sentences[i])])
-            new_preds.append(prediction.argmax(-1)[i][:len(sentences[i])])
-
-        predicted_tags += new_preds
-        gold_tags += new_labels
-        raw_sentences += sentences
-
-    binary_f1, propor_f1 = compute_score(sents=raw_sentences, golds=gold_tags, preds=predicted_tags)
-    return binary_f1, propor_f1
-
-
-def train():
-    best_binary_f1 = 0
-    best_epoch = 0
-    for epoch in range(args.EPOCHS):
-        model.train()
-        logger.info(f"Epoch {epoch}")
-        train_iter = tqdm.tqdm(train_loader)
-        predicted_tags, gold_tags, raw_sentences = [], [], []
-
-        idx = 0
-        for sentences, lengths, labels, char_list in train_iter:
-
-            labels = labels.to(device)
-
-            optimizer.zero_grad()
-            prediction = model(train_elmo_vectors[idx])
-            idx += 1
-            loss = criterion(prediction.flatten(0, 1), labels.flatten())
-
-            loss.backward()
-            optimizer.step()
-            # scheduler.step()
-
-            train_iter.set_postfix_str(f"loss: {loss.item()}")
-
-            new_labels = []
-            new_preds = []
-            for i in range(len(sentences)):
-                new_labels.append(labels[i][:len(sentences[i])])
-                new_preds.append(prediction.argmax(-1)[i][:len(sentences[i])])
-
-            predicted_tags += new_preds
-            gold_tags += new_labels
-            raw_sentences += sentences
-
-        compute_score(sents=raw_sentences, golds=gold_tags, preds=predicted_tags)
-        binary_f1, propor_f1 = evaluate()
-        if binary_f1 > best_binary_f1:
-            best_binary_f1 = binary_f1
-            best_epoch = epoch
-            logger.info(f'Current best epoch is {best_epoch}, and the best binary f1 is {best_binary_f1}.')
-            torch.save(model.state_dict(), "model_{}.pt".format(args.RUN_NAME))
-        else:
-            logger.info(f'Current best epoch is {best_epoch}, and the best binary f1 is {best_binary_f1}.')
-
-
-def compute_score(sents, golds, preds):
-    analysis = get_analysis(sents, preds, golds)
-    binary_f1 = binary_analysis(analysis)
-
-    flat_preds = [int(i) for l in preds for i in l]
-    flat_golds = [int(i) for l in golds for i in l]
-    propor_f1 = proportional_analysis(flat_golds, flat_preds, encoding='BIO')
-    return binary_f1, propor_f1
-
-
-if __name__ == '__main__':
-    seed_everything(seed_value=5550)
-
-    logging.basicConfig(format="%(asctime)s : %(levelname)s : %(message)s", level=logging.INFO)
-    logger = logging.getLogger(__name__)
-
-    parser = argparse.ArgumentParser()
-    parser.add_argument("--BATCH_SIZE", "-bs", default=50, type=int)
-    parser.add_argument("--DROPOUT", "-p", default=0.2, type=float)
-    parser.add_argument("--EPOCHS", "-e", default=50, type=int)
-    parser.add_argument("--MODEL_PATH", "-path", default="/cluster/shared/nlpl/data/vectors/latest/216/")
-    parser.add_argument("--USE_PICKLE", "-up", action='store_true')
-    parser.add_argument("--RUN_NAME", "-rn", default='elmo', type=str)
-
-    args = parser.parse_args()
-    run_name = args.RUN_NAME
-    save_dir = './results'
-    # Setup logs
-    logger = setup_logs(save_dir, run_name)
-    logger.info(args)
-
-    alphabet = Alphabet("data/train.conll", "data/dev.conll", "data/test.conll")
-    # I built elmo model in similar way to bert mode, so just use the data class for bert
-    train_data = BERT_DATA(data_file="data/train.conll", alphabet=alphabet)
-    dev_data = BERT_DATA(data_file="data/dev.conll", alphabet=alphabet, vocab=train_data.vocab)
-    test_data = BERT_DATA(data_file="data/test.conll", alphabet=alphabet, vocab=train_data.vocab)
-
-    train_loader = DataLoader(train_data,
-                              batch_size=args.BATCH_SIZE,
-                              collate_fn=train_data.collate_fn,
-                              shuffle=True)
-
-    dev_loader = DataLoader(dev_data,
-                            batch_size=1,
-                            collate_fn=train_data.collate_fn,
-                            shuffle=False)
-
-    test_loader = DataLoader(test_data,
-                             batch_size=1,
-                             collate_fn=train_data.collate_fn,
-                             shuffle=False)
-
-    logger.info("Data loaded")
-
-    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
-    model = ELMO(
-        model_path=args.MODEL_PATH,
-        dropout_=args.DROPOUT
-    ).to(device)
-
-    if args.USE_PICKLE:
-        # with open('/content/TSA/train_elmo_vectors.pkl', 'rb') as f:
-        #    train_elmo_vectors = pickle.load(f)
-
-        with open('./dev_elmo_vectors.pkl', 'rb') as f:
-            dev_elmo_vectors = pickle.load(f)
-
-        with open('./test_elmo_vectors.pkl', 'rb') as f:
-            test_elmo_vectors = pickle.load(f)
-    else:
-        train_elmo_vectors, dev_elmo_vectors, test_elmo_vectors = get_elmo(
-            model, train_loader, dev_loader, test_loader
-        )
-
-    criterion = nn.CrossEntropyLoss(ignore_index=-1)
-    optimizer = torch.optim.AdamW(model.parameters(), lr=1e-3)
-
-    train()
-
-    # torch.save(model.state_dict(), "model.pt")
-    # model = BERT(*args).to(device)
-    # model.load_state_dict(torch.load("model.pt"))
-    # model.eval()
-
-    test()
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"12340cc9-1c49-4bad-8d93-2f3fa0fc3953\" name=\"Changes\" comment=\"update norbert\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/ELMO.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/ELMO_run.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Model_LSTM_GRU.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MultiBert.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/RNNs.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/help_function.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/models.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/rnn_test/dataset.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/rnn_test/embedding_loading.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/rnn_test/model.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/rnn_test/stanford_sentiment_binary.tsv.gz\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/rnn_test/stanford_sentiment_binary_test.tsv.gz\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/rnn_test/train.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/run_MultiBert.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/run_MultiBert.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/run_model.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/test_elmo.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/test_elmo_run.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/test_rnn.py\" beforeDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"FlaskConsoleOptions\" custom-start-script=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\">\r\n    <envs>\r\n      <env key=\"FLASK_APP\" value=\"app\" />\r\n    </envs>\r\n    <option name=\"myCustomStartScript\" value=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\" />\r\n    <option name=\"myEnvs\">\r\n      <map>\r\n        <entry key=\"FLASK_APP\" value=\"app\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"299pjPgXIWG3sAQVJkw95P7KHci\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../ecca/TSA\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\" />\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.run_model\">\r\n    <configuration name=\"ELMO_run\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"TSA\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/ELMO_run.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"datasets\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"TSA\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/utils\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/utils/datasets.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"run_MultiBert\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"TSA\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/run_MultiBert.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"run_model\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"TSA\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/run_model.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Python.datasets\" />\r\n      <item itemvalue=\"Python.ELMO_run\" />\r\n      <item itemvalue=\"Python.run_model\" />\r\n      <item itemvalue=\"Python.run_MultiBert\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.run_model\" />\r\n        <item itemvalue=\"Python.ELMO_run\" />\r\n        <item itemvalue=\"Python.run_MultiBert\" />\r\n        <item itemvalue=\"Python.datasets\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"12340cc9-1c49-4bad-8d93-2f3fa0fc3953\" name=\"Changes\" comment=\"\" />\r\n      <created>1652535294266</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1652535294266</updated>\r\n      <workItem from=\"1652535297615\" duration=\"30589000\" />\r\n      <workItem from=\"1652636495811\" duration=\"6021000\" />\r\n      <workItem from=\"1652682688953\" duration=\"23208000\" />\r\n      <workItem from=\"1652787167462\" duration=\"55161000\" />\r\n      <workItem from=\"1652981847936\" duration=\"2786000\" />\r\n      <workItem from=\"1653071828607\" duration=\"1747000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"update model\">\r\n      <created>1652769137925</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1652769137925</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"update tuning script\">\r\n      <created>1652882564904</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1652882564904</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"update tuning script\">\r\n      <created>1652898375871</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1652898375871</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"update elmo\">\r\n      <created>1652899346563</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1652899346563</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"update elmo\">\r\n      <created>1652904250606</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1652904250606</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"update norbert\">\r\n      <created>1652954460165</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1652954460165</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"update norbert\">\r\n      <created>1652966358111</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1652966358111</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"8\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"update model\" />\r\n    <MESSAGE value=\"update tuning script\" />\r\n    <MESSAGE value=\"update elmo\" />\r\n    <MESSAGE value=\"update norbert\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"update norbert\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <default-breakpoints>\r\n        <breakpoint type=\"python-exception\">\r\n          <properties notifyOnTerminate=\"true\" exception=\"BaseException\">\r\n            <option name=\"notifyOnTerminate\" value=\"true\" />\r\n          </properties>\r\n        </breakpoint>\r\n      </default-breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/TSA$run_model.coverage\" NAME=\"run_model Coverage Results\" MODIFIED=\"1652966057804\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/TSA$datasets.coverage\" NAME=\"datasets Coverage Results\" MODIFIED=\"1652563263387\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/utils\" />\r\n    <SUITE FILE_PATH=\"coverage/TSA$.coverage\" NAME=\" Coverage Results\" MODIFIED=\"1652637717345\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/TSA$run_MultiBert.coverage\" NAME=\"run_MultiBert Coverage Results\" MODIFIED=\"1652806348190\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/TSA$ELMO_run.coverage\" NAME=\"ELMO_run Coverage Results\" MODIFIED=\"1652832053990\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 52c81401dd4c30c066d1aceb96530a5e45a8c034)
+++ b/.idea/workspace.xml	(date 1653073988563)
@@ -161,10 +161,10 @@
       <method v="2" />
     </configuration>
     <list>
-      <item itemvalue="Python.datasets" />
       <item itemvalue="Python.ELMO_run" />
-      <item itemvalue="Python.run_model" />
+      <item itemvalue="Python.datasets" />
       <item itemvalue="Python.run_MultiBert" />
+      <item itemvalue="Python.run_model" />
     </list>
     <recent_temporary>
       <list>
